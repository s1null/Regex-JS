[zh]
{hello} = 你好！
{lang} = zh
{pares_js} = 正在解析网页中...
{target_url} = 目标站点：
{pares_js_fini_1} = 网页解析完毕，共发现
{pares_js_fini_2} = 个JS文件
{downloading} = 正在下载：
{have_it} = 已经存在对应文件：
{maybe_have_codesplit} = 疑似存在JS异步加载：
{get_codesplit} = 正在处理异步加载代码中...
{run_codesplit_s} = 异步JS文件提取成功，提取数量：
{check_codesplit_twice} = 正在暴力检测JS文件中...
{check_codesplit_twice_fini_1} = 暴力检测结束，成功检测出
{check_codesplit_twice_fini_2} = 个JS文件
{check_js_fini} = JS文件收集结束，开始提取平台API...
{total_api_1} = 成功提取出
{total_api_2} = 条API路径
{open_violent_input} = 是否启用暴力提取模式(输入Y开启)：
{total_api_auto} = 提取API总数过少，自动开启暴力提取模式
{api_violent_file} = 暴力提取文件：
{total_api_num} = 提取流程结束，初步提取API可能结果数：
{response_start} = 正在检测目标响应状态中...
{response_end} = 目标响应状态检测结束，开始漏洞检测...
{connect_s} = 网络连通性检测通过，当前出口IP：
{connect_f} = 外网连接失败，请检查当前网络状况或者代理情况
{risk_h} = 高风险
{risk_m} = 中风险
{risk_l} = 低风险
{risk_n} = 无风险
{mode_simple} = 简单版
{mode_adv} = 高级版
{no_extra_cookies} = 未启用Cookies功能
{no_extra_head} = 未启用附加头部功能
{vuln_unauth_num} = 未授权访问漏洞：
{vuln_CORS_num} = CORS漏洞：
{vuln_info_num} = 敏感信息泄露漏洞：
{ge} = 个
{report_creat} = 检测报告正在生成中...
{report_fini} = 检测报告生成完毕！
{r_api_addr} = API地址：
{r_api_js} = 关联JS地址：
{r_api_res} = 响应内容：
{r_js_path} = JS地址：
{r_js_des} = 泄露描述：
{r_js_detial} = 泄露内容：
{r_vuln_unauth} = 接口存在未授权访问漏洞（中危）
{r_vuln_unauth_maybe} = 接口存在未授权访问漏洞（低危、疑似）
{r_vuln_info} = 文件存在敏感信息泄露漏洞（中危）
{r_api_r_js} = 关联JS：
{r_sug_unauth_1} = 针对未授权访问漏洞：
{r_sug_unauth_2} = 对于后台接口，确保所有API接口先经过登录控制器；
{r_sug_unauth_3} = 在验证用户身份权限前不进行任何数据的交互。
{r_sug_info_1} = 针对敏感信息泄露漏洞：
{r_sug_info_2} = 不在JS中保存明文密码、测试数据等信息，及时排查并删除相应内容。
{r_sug_cors_1} = 针对CORS漏洞：
{r_sug_cors_2} = 严格判断来源域名是否在系统白名单内，不推荐使用黑名单判断方式。
{r_sug_sqli_1} = 针对SQL注入漏洞：
{r_sug_sqli_2} = 使用预编译SQL查询方式进行数据库查询；
{r_sug_sqli_3} = 对进入数据库的特殊字符进行转义处理，或编码转换。
{r_sug_upload_1} = 针对任意文件上传漏洞：
{r_sug_upload_2} = 服务端采用白名单方式校验文件后缀；
{r_sug_upload_3} = 设置目录权限限制，禁止上传目录的执行权限；
{r_sug_upload_4} = 建议使用OSS静态存储服务器来存储用户上传的文件。
{r_sug_password_1} = 针对弱口令漏洞：
{r_sug_password_2} = 不要使用常见的弱口令作为密码；
{r_sug_password_3} = 建议使用包含随机值的或者随机生成的字符串作为系统密码。
{r_sug_bac_1} = 针对水平越权漏洞：
{r_sug_bac_2} = 设计表时对用户ID、订单ID等根据ID进行操作的ID字段进行随机化；
{r_sug_bac_3} = 严格校验当前用户操作与当前登录用户身份权限是否匹配。
{r_sug_g_1} = 综合安全加固建议：
{r_sug_g_2} = 配备专业的WEB应用安全防护设备，应对来自互联网的主流WEB应用安全攻击；
{r_sug_g_3} = 定期进行专业的安全评估，及时掌握信息系统的安全状况；
{r_sug_g_4} = 建立一套有效的安全应急流程，并定期对员工进行安全培训；
{r_sug_g_5} = 寻求专业的安全服务团队或是采用例如雷神可信众测的安全众测方式；
{r_sug_g_6} = 完善安全管理制度体系，对信息系统的日常维护和使用进行规范。
{r_get} = GET请求
{r_post} = POST请求
{r_l_h} = 高危
{r_l_m} = 中危
{r_l_l} = 低危
{r_vuln_maybe} = 疑似
{js_split_n} = 无
{js_split_s} = 异步
{js_split_b} = 爆破
{vuln_info} = 漏洞详情
{vuln_type} = 漏洞类型
{vuln_level} = 漏洞等级
{vuln_path} = 漏洞地址
{related_frag} = 关联片段
{r_type} = 请求类型
{api_detail} = API详情
{api_name} = API名称
{scaned_plat} = 被扫描平台
{para_value} = 输入参数值
{scan_method} = 本次扫描采用
{scan_time} = 扫描模式，共耗时
{s} = 秒
{use} = 使用
{ip_address} = 作为扫描出口IP地址
{co_discovery} = 共发现
{effective_api} = 个有效 API 接口
{effective_js} = 个相关 JS 文件
{effective_vuln} =  个安全漏洞
{extra_cookies} = 附加 Cookies 信息为
{extra_head} =  附加头部信息为
{vuln_total_level} =  经过本工具分析，目标平台的安全风险等级为
{no_vuln} = 无漏洞
{unauth_vuln} = 未授权访问漏洞
{info_vuln} = 敏感信息泄露漏洞
{info_vuln_type} = 敏感信息类型
{password_vuln} = 弱口令漏洞
{vuln_passWord_num} = 弱口令漏洞：
{r_vuln_passWord} = 接口存在弱口令漏洞（高危）
{request_info} = 请求内容：
{request_head} = 请求头
{response_head} = 响应头
{CORS_vuln} = CORS漏洞
{r_vuln_CORS} = 站存在CORS漏洞(低危)
{web_addr} = 网站
{r_vuln_bac} = 存在水平越权漏洞（中危）
{vuln_BAC_num} = 水平越权漏洞数量
{respons_info} = 响应内容
{BAC_vuln} = 水平越权漏洞
{r_vuln_upload} = 存在任意文件上传漏洞（高危）
{upload_vuln} = 任意文件上传漏洞
{vuln_upload_num} = 任意文件上传漏洞数量
{vuln_sql_num} = SQL注入漏洞数量
{r_vuln_sql} = 存在SQL注入漏洞(高危)
{sql_vuln} = SQL注入漏洞
{adv_start} = 进入高级模式流程...
{beauty_js} = 正在对JS文件做二次美化中...
{fuzzer_param} = 正在提取API参数中，提取时间可能较长...
{ext_start} = 扩展功能开启，正在执行附件插件中...
{ext_end} = 附加插件全部执行完毕...
{unauth_test} = 开始检测未授权访问漏洞
{info_test} = 开始检测敏感信息泄露漏洞
{cors_test} = 开始检测CORS漏洞
{password_test} = 开始检测弱口令漏洞
{upload_test} = 开始检测任意文件上传漏洞
{bac_test} = 开始检测水平越权漏洞
{sql_test} = 开始检测SQL注入漏洞
{all_end} = 全部扫描及检测完毕，Packer Fuzzer团队感谢您的使用！
{check_pack_s} = 恭喜，这个站点很可能是通过前端打包器构建的！
{check_pack_f} = 未检测到前端打包器特征，也有可能是现有规则不足...
{db_path} = 缓存文件路径：
{log_path} = 日志文件路径：
{base_dir_list} = 成功提取如下BaseDir：
{api_top5_list} = 前五条API提取结果如下：
{new_base_dir} = 检测到提取结果不准确，请输入新的BaseDir (使用逗号分隔)：
{api_length} = 长度
{report_path} = 检测报告文件路径：

[en]
{hello} = Hello！
{lang} = en
{pares_js} = Parsing the page ...
{target_url} = Target sites：
{pares_js_fini_1} = Page analysis completed,
{pares_js_fini_2} = JS files found
{downloading} = Downloading：
{have_it} = The corresponding file already exists：
{maybe_have_codesplit} = JS asynchronous loading is suspected to exist：
{get_codesplit} = Processing asynchronous code loading
{run_codesplit_s} = Successful extraction of the asynchronous JS file, number of withdrawals：
{check_codesplit_twice} = Brute force detecting ...
{check_codesplit_twice_fini_1} = End of brute force detection,
{check_codesplit_twice_fini_2} =  JS files detected successfully
{check_js_fini} = The collection of the JS files is finished and the extraction of the API from the platform begins ...
{total_api_1} = successfully extracted
{total_api_2} = API path
{open_violent_input} = If or not to enable brute force extraction mode (input Y to enable)：
{total_api_auto} = Too few total APIs to extract and brute force extraction mode is automatically enabled：
{api_violent_file} = violent extraction of file：
{total_api_num} = End of extraction process, number of possible results for initial API extraction：
{response_start} = Target response status is being detected...
{response_end} = Target response status checked, vulnerability detection started...
{connect_s} = Network connectivity checked, current egress IP：
{connect_f} = The extranet connection failed, please check the current network status or proxy situation：
{risk_h} = High risk
{risk_m} = Medium risk
{risk_l} = Low risk
{risk_n} = No risk
{mode_simple} = Simple Version
{mode_adv} = Advanced Edition
{no_extra_cookies} = Cookies are not enabled：
{no_extra_head} = The additional head feature is not enabled：
{vuln_unauth_num} = Unauthorized Access Vulnerability：
{vuln_CORS_num} = Cors vulnerability：
{vuln_info_num} = Sensitive Information Disclosure Vulnerability：
{ge} =
{report_creat} = The test report is being generated...
{report_fini} = The report is generated!
{r_api_addr} = API address：
{r_api_js} = Associated JS address：
{r_api_res} = Response content：
{r_js_path} = JS address：
{r_js_des} = Leak description：
{r_js_detial} = Leaked content：
{r_vuln_unauth} = Unauthorized access vulnerability in interface (medium risk)
{r_vuln_unauth_maybe} = Unauthorized access vulnerability in interface (low risk, suspected)
{r_vuln_info} = file has a sensitive information leak (medium risk)
{r_api_r_js} = Associated JS：
{r_sug_unauth_1} = For unauthorized access vulnerability.
{r_sug_unauth_2} = For backend interfaces, ensure that all API interfaces go through the login controller first.
{r_sug_unauth_3} = No data is interacted with until user identity privileges are verified.
{r_sug_info_1} = For sensitive information disclosure vulnerabilities.
{r_sug_info_2} = Do not store plaintext passwords, test data, and other information in JS, and promptly troubleshoot and delete the corresponding content.
{r_sug_cors_1} = For CORS vulnerabilities.
{r_sug_cors_2} = Strictly determine if the source domain is in the whitelist, blacklisting is not recommended.
{r_sug_sqli_1} = For SQL injection vulnerabilities.
{r_sug_sqli_2} = Use precompiled SQL queries for database queries.
{r_sug_sqli_3} = The special characters that enter the database are escaped, or encoded.
{r_sug_upload_1} = For arbitrary file upload vulnerabilities.
{r_sug_upload_2} = The server uses a whitelist to check file extensions.
{r_sug_upload_3} = Set directory permissions restrictions to disable execution permissions for the upload directory.
{r_sug_upload_4} = It is recommended that you use an OSS static storage server to store files uploaded by users.
{r_sug_password_1} = For weak password vulnerabilities.
{r_sug_password_2} = Do not use common weak passwords as passwords.
{r_sug_password_3} = It is recommended to use a string containing a random value or a randomly generated string as the system password.
{r_sug_bac_1} = For horizontal override vulnerabilities.
{r_sug_bac_2} = Randomize ID fields that operate on IDs, such as user IDs and order IDs, when designing tables.
{r_sug_bac_3} = Strictly verify that the current user operation matches the current logged-in user's identity privileges.
{r_sug_g_1} = Comprehensive Security Reinforcement Recommendations.
{r_sug_g_2} = Equipped with professional web application security protection equipment to deal with mainstream web application security attacks from the Internet.
{r_sug_g_3} = Periodic professional security assessments to keep abreast of the security status of information systems.
{r_sug_g_4} = Establish an effective safety emergency process and conduct regular safety training for employees.
{r_sug_g_5} = Seeking a professional security service team or using a security crowdsourcing approach such as ThorSRC (Bountyteam China).
{r_sug_g_6} = Improve the security management system system and standardize the routine maintenance and use of information systems.
{r_get} = GET request
{r_post} = POST request
{r_l_h} = high risk
{r_l_m} = medium-risk
{r_l_l} = low risk
{r_vuln_maybe} = suspect
{js_split_n} = none.
{js_split_s} = asynchronous
{js_split_b} = blast.
{vuln_info} = Vulnerability details
{vuln_type} = Type of vulnerability
{vuln_level} = Vulnerability level
{vuln_path} = The address of the vulnerability.
{related_frag} = Related fragment
{r_type} = Request type
{api_detail} = API details
{api_name} = API name
{scaned_plat} = The platform being scanned.
{para_value} = Input parameter value
{scan_method} = The scan was done.
{scan_time} = scan mode, total elapsed time.
{s} = seconds.
{use} = Use
{ip_address} = as a scanned egress IP address
{co_discovery} = Total discovery
{effective_api} = a valid API interface.
{effective_js} = a related JS file.
{effective_vuln} = security hole
{extra_cookies} = Attach cookies as
{extra_head} = The additional header information is
{vuln_total_level} = As a result of this tool's analysis, the target platform has a security risk level of
{no_vuln} = No vulnerabilities.
{unauth_vuln} = Unauthorized Access Vulnerability
{info_vuln} = Sensitive information breach.
{info_vuln_type} = Sensitive information type
{password_vuln} = weak password vulnerability
{vuln_passWord_num} = Weak password vulnerability：
{r_vuln_passWord} = Weak password vulnerability (high risk) in interface.
{request_info} = The content of the request：
{request_head} = request header
{response_head} = response_head
{CORS_vuln} = CORS vulnerability
{r_vuln_CORS} = station has a CORS vulnerability (low risk).
{web_addr} = website
{r_vuln_bac} = Horizontal override vulnerability (medium risk).
{vuln_BAC_num} = number of horizontal override vulnerabilities
{respons_info} = response content
{BAC_vuln} = horizontal override vulnerability
{r_vuln_upload} = There is an arbitrary file upload vulnerability.
{upload_vuln} = arbitrary file upload vulnerability.
{vuln_upload_num} = Arbitrary file upload vulnerability：
{vuln_sql_num} = Number of SQL Injection Vulnerabilities
{r_vuln_sql} = SQL injection vulnerability (high risk).
{sql_vuln} = SQL Injection Vulnerability
{adv_start} = Entering advanced mode...
{beauty_js} = We're reworking the JS file...
{fuzzer_param} = Extracting API parameters, which may take longer...
{ext_start} = Extensions are enabled, running an add-on...
{ext_end} = Additional plug-ins have been fully executed...
{unauth_test} = Start detecting unauthorized access.
{info_test} = Start detecting sensitive information vulnerabilities.
{cors_test} = Start detecting CORS vulnerabilities.
{password_test} = Start detecting weak password vulnerabilities.
{upload_test} = Start detecting arbitrary file upload vulnerabilities.
{bac_test} = Start detecting horizontal override vulnerabilities.
{sql_test} = Start detecting SQL injection vulnerabilities.
{all_end} = All scans and inspections complete, the Packer Fuzzer team thanks you for using it!
{check_pack_s} = Congratulations, this site was most likely built through a front-end packer!
{check_pack_f} = Front-end packer feature not detected, or maybe an existing rule is insufficient...
{xhlj} = ༒ Exhibiting tools at China's CYBER SECURITY ARSENAL
{db_path} = Cache file path：
{log_path} = Log file path：
{base_dir_list} = Extract the following BaseDir：
{api_top5_list} = The first five API extraction results are：
{new_base_dir} = Inaccurate extraction detected, please enter a new BaseDir (separated by commas)：
{api_length} = Length
{report_path} = Detection report file path：